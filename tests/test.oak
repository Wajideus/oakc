#include "stdio", "stdlib"


const Actor[16] actors;
Component* component;

typedef struct ActorInstance {
    mixin fixto actors via int actor;
}


typedef enum Status {
    DEAD = 1 << 2,
    BURNED, FROZEN
}

typedef struct Entity {
    Component*[] component;
    Status status;
}

typedef struct Door {
    mixin Entity entity;
    float openness;
}


// 'proc' is not a special keyword for functions, it's a typename, short for
// 'process', which is used for concurrent programming.

proc main(str[] args) {

    // If you assign a returned 'proc' to an identifier or use it as an
    // argument in a function call, you create an asynchronous process.
    proc copying = copyFile("file.txt", "directory/");

    // An async proc isn't guaranteed to start until we transfer control to it
    // at least once.
    continue copying;

    // You can force an async proc to complete by using a 'finish' statement.
    finish copying;

    // Checking on the state of a proc causes a transfer of control to it.
    while copying {
        print "still copying\n";
    }

    // If you don't 'catch' a returned proc, it gets executed sequentially.
    copyFile "file2.txt", toLocation = "directory/";

    // You can hoist a proc by returning it.
    return copyFile("file3.txt", "directory/");
}