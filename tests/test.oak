#include "stdio", "stdlib";


// The syntax for arrays may seem a little weird at first, but they're
// designed this way to be consistent with the syntax of functions.

typedef struct Entity {
   components[] *Component;
   status Status;
}

typedef struct Door {
   mixin entity Entity;
   openness Float;
}

// Below is how you would import functions from C.

extern func printf(format *Const Char, ...);
extern func qsort(ptr*, count Size, size Size,
                  comp(val *Const Void, val *Const Void) Int);

func main(args[] Str) Int {

   // Pointers are dereferenced by default.
   var x, y *Const Int = 5, 7;
   x += 3;                   // so this results in x == 8
   *x++;                     // and this is a pointer increment

   // Pointers implicitly cast to values of the same type.
   printf "%i, %i\n", x, y;

   switch x {
      case 7:
         break;
      default:
         break;
   }
}


// This is how you do operator overloading
func (v1 Vec3 + v2 Vec3) Vec3 {
   return (v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
}

// This is using generics with explicit typing.
// func sum<$T>(x T, y T) T;

// This is using type specialization with explicit typing.
// func sum<Int>(x Int, y Int) Int;

// This is using generics with implicit typing.
// func sum(x $T, y T) T;
