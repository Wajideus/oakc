{
   "scopeName": "source.oak",
   "fileTypes": [ "oak" ],
   "foldingStartMarker": "\\{\\s*$",
   "foldingStopMarker": "'^\\s*\\}",
   "patterns": [
		{"include": "#directive-keywords"},
		{"include": "#declaration-keywords"},
      {"include": "#control-keywords"},
      {"include": "#branch-keywords"},
      {"include": "#operator-keywords"},
      {"include": "#builtin-constants"},
      {"include": "#regular-constants"},
      {"include": "#regular-typenames"},
      {"include": "#modifiers"},
		{"include": "#strings"},
		{"include": "#comments"}
   ],
   "repository": {
		"directive-keywords": {
			"match": "#(include)",
			"captures": {
				"1": {
					"name": "meta.preprocessor.keyword"
				}
			}
		},
      "declaration-keywords": {
		 "match": "\\b(bool|char|enum|float|int|proc|str|struct|uint|void)\\b",
         "name": "storage.type.oak"
		},
      "control-keywords": {
         "match": "\\b(case|default|defer|do|else|for|if|of|switch|while)\\b",
         "name": "keyword.control.oak"
      },
      "branch-keywords": {
         "match": "\\b(break|continue|finish|goto|return)\\b",
         "name": "keyword.control.branch.oak"
      },
      "operator-keywords": {
         "match": "\\b(lengthof|numberof|offsetof|sizeof)\\b",
         "name": "keyword.operator.sizeof.oak"
      },
      "builtin-constants": {
         "match": "\\b(false|null|true)\\b",
         "name": "constant.language.oak"
      },
		"regular-constants": {
			"match": "\\b([A-Z][0-9A-Z_]+)\\b",
			"name": "regular_constant.oak"
		},
      "regular-typenames": {
         "match": "\\b([A-Z][0-9A-Z_a-z]*)\\b",
         "name": "entity.name.type.oak"
      },
      "modifiers": {
         "match": "\\b(const|extern|fixto|mixin|typedef|var|via)\\b",
         "name": "storage.modifier.oak"
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.double.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.single.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.c"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.c"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
					"name": "constant.other.placeholder.c"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.c"
						}
					}
				}
			]
		},
      "comments": {
         "patterns": [
            {
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.c"
						}
					},
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
					"name": "comment.block.c"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.c"
						}
					},
					"end": "\\*/|\\\\\\*.*\\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.c"
						}
					},
					"name": "comment.block.c"
				},
				{
					"match": "\\*/.*\\n",
					"name": "invalid.illegal.stray-comment-end.c"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.c"
						}
					},
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
					"name": "comment.line.banner.cpp"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
            }
         ]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.c"
						}
					}
				}
			]
		}
   }
}
